{
  "title": "Database Design Principles and Normalization",
  "author": "Database Systems Team",
  "version": "2.1",
  "last_updated": "2024-01-15",
  "content": {
    "introduction": {
      "description": "Database design is the process of creating a detailed data model of a database. This involves defining tables, relationships, constraints, and indexes to efficiently store and retrieve data.",
      "importance": "Good database design ensures data integrity, reduces redundancy, improves performance, and facilitates maintenance."
    },
    "normalization": {
      "definition": "Normalization is the process of organizing data in a database to reduce redundancy and improve data integrity.",
      "normal_forms": {
        "first_normal_form": {
          "description": "Each table cell should contain a single value, and each record needs to be unique.",
          "rules": [
            "Eliminate repeating groups",
            "Create separate tables for related data",
            "Identify each record with a primary key"
          ]
        },
        "second_normal_form": {
          "description": "Must be in 1NF and all non-key attributes must be fully functionally dependent on the primary key.",
          "rules": [
            "Remove partial dependencies",
            "Create separate tables for sets of values that apply to multiple records"
          ]
        },
        "third_normal_form": {
          "description": "Must be in 2NF and all non-key attributes must be directly dependent on the primary key.",
          "rules": [
            "Remove transitive dependencies",
            "No non-key attribute should depend on another non-key attribute"
          ]
        }
      }
    },
    "design_principles": {
      "entity_relationship_modeling": {
        "entities": "Objects or concepts that can have data stored about them",
        "attributes": "Properties or characteristics of entities",
        "relationships": "Associations between entities",
        "cardinality": "The number of instances of one entity that can be associated with instances of another entity"
      },
      "indexing_strategies": {
        "primary_indexes": "Automatically created for primary keys",
        "secondary_indexes": "Created on frequently queried columns",
        "composite_indexes": "Indexes on multiple columns for complex queries",
        "considerations": [
          "Indexes speed up SELECT operations",
          "Indexes slow down INSERT, UPDATE, DELETE operations",
          "Balance between query performance and write performance"
        ]
      }
    },
    "data_types": {
      "numeric": {
        "integer": "Whole numbers (INT, BIGINT, SMALLINT)",
        "decimal": "Fixed-point numbers (DECIMAL, NUMERIC)",
        "floating_point": "Approximate numbers (FLOAT, DOUBLE)"
      },
      "string": {
        "fixed_length": "CHAR - fixed length strings",
        "variable_length": "VARCHAR - variable length strings",
        "text": "TEXT - large text data"
      },
      "date_time": {
        "date": "Date values (YYYY-MM-DD)",
        "time": "Time values (HH:MM:SS)",
        "datetime": "Combined date and time",
        "timestamp": "Date and time with timezone information"
      }
    },
    "constraints": {
      "primary_key": "Uniquely identifies each record in a table",
      "foreign_key": "Links records between tables and maintains referential integrity",
      "unique": "Ensures all values in a column are different",
      "not_null": "Ensures a column cannot have empty values",
      "check": "Ensures values in a column satisfy a specific condition",
      "default": "Provides a default value for a column"
    },
    "performance_optimization": {
      "query_optimization": [
        "Use appropriate indexes",
        "Avoid SELECT * statements",
        "Use LIMIT for large result sets",
        "Optimize JOIN operations"
      ],
      "database_tuning": [
        "Configure buffer pool size",
        "Optimize connection pooling",
        "Monitor and analyze slow queries",
        "Regular maintenance tasks (ANALYZE, VACUUM)"
      ]
    },
    "best_practices": [
      "Use meaningful table and column names",
      "Document your database schema",
      "Implement proper backup and recovery procedures",
      "Use transactions for data consistency",
      "Regularly monitor database performance",
      "Plan for scalability from the beginning",
      "Implement proper security measures",
      "Use stored procedures for complex business logic"
    ],
    "common_patterns": {
      "one_to_many": {
        "description": "One record in a table relates to multiple records in another table",
        "example": "One customer can have multiple orders"
      },
      "many_to_many": {
        "description": "Multiple records in one table relate to multiple records in another table",
        "example": "Students can enroll in multiple courses, and courses can have multiple students",
        "implementation": "Requires a junction table"
      },
      "inheritance": {
        "table_per_hierarchy": "Single table for all types with discriminator column",
        "table_per_type": "Separate table for each type",
        "table_per_concrete_class": "Table only for concrete classes"
      }
    }
  },
  "examples": {
    "normalized_schema": {
      "customers": {
        "customer_id": "PRIMARY KEY",
        "first_name": "VARCHAR(50) NOT NULL",
        "last_name": "VARCHAR(50) NOT NULL",
        "email": "VARCHAR(100) UNIQUE NOT NULL",
        "created_at": "TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
      },
      "orders": {
        "order_id": "PRIMARY KEY",
        "customer_id": "FOREIGN KEY REFERENCES customers(customer_id)",
        "order_date": "DATE NOT NULL",
        "total_amount": "DECIMAL(10,2) NOT NULL",
        "status": "VARCHAR(20) DEFAULT 'pending'"
      },
      "order_items": {
        "order_item_id": "PRIMARY KEY",
        "order_id": "FOREIGN KEY REFERENCES orders(order_id)",
        "product_id": "FOREIGN KEY REFERENCES products(product_id)",
        "quantity": "INT NOT NULL CHECK (quantity > 0)",
        "unit_price": "DECIMAL(10,2) NOT NULL"
      }
    }
  }
}
