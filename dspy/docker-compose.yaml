version: '3.8'

# Docker Compose Template for AI Agent Framework Infrastructure
# This template provides isolated infrastructure services for each framework
# 
# Usage:
#   1. Copy this file to your framework directory as docker-compose.yaml
#   2. Replace environment variables with framework-specific values
#   3. Customize ports to avoid conflicts between frameworks
#
# Port Allocation Strategy:
#   CrewAI:     Qdrant: 6333, Langfuse: 3000, Postgres: 5432, MCP: 8080
#   DSPy:       Qdrant: 6334, Langfuse: 3001, Postgres: 5433, MCP: 8081
#   PocketFlow: Qdrant: 6335, Langfuse: 3002, Postgres: 5434, MCP: 8082
#   Google ADK: Qdrant: 6336, Langfuse: 3003, Postgres: 5435, MCP: 8083
#   Pydantic AI:Qdrant: 6337, Langfuse: 3004, Postgres: 5436, MCP: 8084

services:
  # Qdrant Vector Database
  # Provides vector storage and similarity search capabilities
  qdrant:
    image: qdrant/qdrant:latest
    container_name: "dspy_qdrant"
    ports:
      - "6334:6333"
    volumes:
      - dspy_qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - dspy_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  # Backend database for Langfuse observability platform
  postgres:
    image: postgres:15-alpine
    container_name: "dspy_postgres"
    environment:
      - POSTGRES_DB=langfuse
      - POSTGRES_USER=langfuse_user
      - POSTGRES_PASSWORD=langfuse_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - dspy_postgres_data:/var/lib/postgresql/data
    networks:
      - dspy_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U langfuse_user -d langfuse"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Langfuse Observability Platform
  # Provides LLM observability, tracing, and analytics
  langfuse:
    image: langfuse/langfuse:latest
    container_name: "dspy_langfuse"
    ports:
      - "3001:3000"
    environment:
      - DATABASE_URL=postgresql://langfuse_user:langfuse_password@postgres:5432/langfuse
      - NEXTAUTH_SECRET=dspy_nextauth_secret_change_me
      - SALT=dspy_salt_change_me
      - NEXTAUTH_URL=http://localhost:3001
      - TELEMETRY_ENABLED=true
      - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=false
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dspy_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.2'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/public/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # External MCP Services Integration
  # Note: This project uses external MCP servers instead of custom implementation
  # Recommended MCP servers for different capabilities:
  #
  # Web Search:
  #   - Brave Search MCP (privacy-focused)
  #   - Tavily Search MCP (premium features)
  #   - DuckDuckGo MCP (no API key required)
  #
  # Vector Search:
  #   - Official Qdrant MCP server
  #   - Typesense MCP server
  #
  # File Operations:
  #   - Official Filesystem MCP server
  #   - GitHub MCP server for repository access
  #
  # Setup Instructions:
  # 1. Install desired MCP servers using: uvx mcp-server-<name>
  # 2. Configure in Claude Desktop or your preferred MCP client
  # 3. Update framework configurations to use external MCP endpoints
  #
  # For local development, you can run MCP servers directly:
  # uvx mcp-server-filesystem --allowed-dirs /path/to/shared_datasets
  # uvx mcp-server-brave-search
  # uvx mcp-server-qdrant --host localhost --port 6334

# Named Volumes for Data Persistence
volumes:
  dspy_qdrant_data:
    driver: local
    name: dspy_qdrant_data
  dspy_postgres_data:
    driver: local
    name: dspy_postgres_data

# Isolated Network for Framework Services
networks:
  dspy_network:
    driver: bridge
    name: dspy_network
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Environment Variables Required:
# FRAMEWORK_NAME: Unique identifier for the framework (e.g., "crewai", "dspy")
# QDRANT_PORT: External port for Qdrant service (6333-6337)
# LANGFUSE_PORT: External port for Langfuse web interface (3000-3004)
# MCP_PORT: External port for MCP server (8080-8084)
# POSTGRES_USER: PostgreSQL username for Langfuse
# POSTGRES_PASSWORD: PostgreSQL password for Langfuse
# LANGFUSE_DB_URL: Full PostgreSQL connection URL for Langfuse
# LANGFUSE_NEXTAUTH_SECRET: Secret key for NextAuth.js authentication
# LANGFUSE_SALT: Salt for password hashing
# NETWORK_SUBNET: Unique subnet number for network isolation (20-24)
